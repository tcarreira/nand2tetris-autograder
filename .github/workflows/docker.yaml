name: docker_build

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: tcarreira/nand2tetris-autograder
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
      -
        name: Docker meta (epicbox)
        id: docker_meta_epicbox
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: tcarreira/nand2tetris-autograder
          tag-latest: false
          tag-semver: |
            {{version}}-epicbox
            {{major}}.{{minor}}-epicbox
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push (latest)
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      -
        name: Build and push (epicbox)
        id: docker_build_epicbox
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.docker_meta_epicbox.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          build-args: |
            SUBMISSION=/sandbox/submissao.zip
            QUIET=yes
            STRIP_SH_ARGS=yes
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
